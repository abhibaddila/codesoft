def print_board(board):
    print("  1   2   3")
    for i, row in enumerate(board, 1):
        print(f"{i} {' | '.join(row)}")
        if i < 3:
            print("  ---------")

def is_winner(board, player):
    # Check rows and columns for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    # Check diagonals for a win
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def minimax(board, depth, is_maximizing):
    if is_winner(board, 'O'):
        return 1
    if is_winner(board, 'X'):
        return -1
    if is_full(board):
        return 0
    
    if is_maximizing:
        best_score = float('-inf')
        for row, col in get_empty_cells(board):
            board[row][col] = 'O'
            score = minimax(board, depth + 1, False)
            board[row][col] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for row, col in get_empty_cells(board):
            board[row][col] = 'X'
            score = minimax(board, depth + 1, True)
            board[row][col] = ' '
            best_score = min(score, best_score)
        return best_score

def get_best_move(board):
    best_score = float('-inf')
    best_move = None
    for row, col in get_empty_cells(board):
        board[row][col] = 'O'
        score = minimax(board, 0, False)
        board[row][col] = ' '
        if score > best_score:
            best_score = score
            best_move = (row, col)
    return best_move

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print("You are X, and the AI is O.")
    print("Enter rows and columns as 1, 2, or 3.")
    print_board(board)
    
    while True:
        # Human player's turn
        while True:
            try:
                row = int(input("Enter the row (1-3): ")) - 1
                col = int(input("Enter the column (1-3): ")) - 1
                if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':
                    break
                else:
                    print("Invalid move. Try again.")
            except ValueError:
                print("Invalid input. Please enter numbers.")
        
        board[row][col] = 'X'
        print_board(board)
        
        if is_winner(board, 'X'):
            print("Congratulations! You win!")
            return
        if is_full(board):
            print("It's a tie!")
            return
        
        # AI player's turn
        print("AI is making a move...")
        ai_row, ai_col = get_best_move(board)
        board[ai_row][ai_col] = 'O'
        print_board(board)
        
        if is_winner(board, 'O'):
            print("AI wins! Better luck next time.")
            return
        if is_full(board):
            print("It's a tie!")
            return

if __name__ == "__main__":
    play_game()
