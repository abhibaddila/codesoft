from collections import defaultdict

class MovieRecommendationAI:
    def __init__(self):
        self.movies = {
            1: {"title": "The Shawshank Redemption", "genres": ["Drama"], "rating": 9.3},
            2: {"title": "The Godfather", "genres": ["Crime", "Drama"], "rating": 9.2},
            3: {"title": "The Dark Knight", "genres": ["Action", "Crime", "Drama"], "rating": 9.0},
            4: {"title": "Pulp Fiction", "genres": ["Crime", "Drama"], "rating": 8.9},
            5: {"title": "Forrest Gump", "genres": ["Drama", "Romance"], "rating": 8.8},
            6: {"title": "Inception", "genres": ["Action", "Adventure", "Sci-Fi"], "rating": 8.8},
            7: {"title": "The Matrix", "genres": ["Action", "Sci-Fi"], "rating": 8.7},
            8: {"title": "Goodfellas", "genres": ["Biography", "Crime", "Drama"], "rating": 8.7},
            9: {"title": "The Silence of the Lambs", "genres": ["Crime", "Drama", "Thriller"], "rating": 8.6},
            10: {"title": "Jurassic Park", "genres": ["Adventure", "Sci-Fi", "Thriller"], "rating": 8.1},
            11: {"title": "The Lion King", "genres": ["Animation", "Adventure", "Drama"], "rating": 8.5},
            12: {"title": "Gladiator", "genres": ["Action", "Adventure", "Drama"], "rating": 8.5},
            13: {"title": "The Departed", "genres": ["Crime", "Drama", "Thriller"], "rating": 8.5},
            14: {"title": "The Usual Suspects", "genres": ["Crime", "Mystery", "Thriller"], "rating": 8.5},
        }
        self.genre_index = self._build_genre_index()

    def _build_genre_index(self):
        genre_index = defaultdict(list)
        for movie_id, movie in self.movies.items():
            for genre in movie["genres"]:
                genre_index[genre].append(movie_id)
        return genre_index

    def recommend_movies(self, genre, n=5):
        if genre not in self.genre_index:
            return []
        
        genre_movies = self.genre_index[genre]
        sorted_movies = sorted(genre_movies, key=lambda x: self.movies[x]["rating"], reverse=True)
        top_movies = sorted_movies[:n]
        return [self.movies[movie_id] for movie_id in top_movies]

    def interact(self):
        print("Welcome to the Movie Recommendation AI!")
        print("This AI uses content-based filtering to recommend movies based on genres.")

        while True:
            print("\nAvailable genres:")
            available_genres = sorted({genre for movie in self.movies.values() for genre in movie["genres"]})
            print(", ".join(available_genres))

            genre = input("\nEnter a genre to get movie recommendations (or 'quit' to exit): ").capitalize()

            if genre.lower() == 'quit':
                print("Thank you for using the Movie Recommendation AI. Goodbye!")
                break

            if genre not in self.genre_index:
                print(f"Sorry, '{genre}' is not a recognized genre. Please try again.")
                continue

            recommendations = self.recommend_movies(genre)

            if recommendations:
                print(f"\nTop recommended {genre} movies:")
                for i, movie in enumerate(recommendations, 1):
                    print(f"{i}. {movie['title']} (Rating: {movie['rating']}) - Genres: {', '.join(movie['genres'])}")
            else:
                print(f"Sorry, no movies found in the '{genre}' genre.")

if __name__ == "__main__":
    ai = MovieRecommendationAI()
    ai.interact()
